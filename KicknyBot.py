# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ —è–∑—ã–∫–µ python –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ "–ß–∏—Ç–∞—Ç–µ–ª—å –Ω–∞ 24—á", "–ë–∞–Ω –Ω–∞–≤–µ–≥–¥–∞", "–ü—Ä–æ—Å—Ç–∏—Ç—å".
# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—É—Ç–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º @<–ò–º—è–ë–æ—Ç–∞>. –ï—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ "–ü—Ä–æ—Å—Ç–∏—Ç—å", —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∞—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª—è–µ—Ç—Å—è.
# –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–µ –∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
# –û—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Å–µ–±—è.
# –î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "VotesLimit" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è. 
# –î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "VotesMonoLimit" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ.
# –î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ "TimeLimit" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö —Å–±–æ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤.
# –î–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∫–æ–º–∞–Ω–¥—É "Help" –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ API —Å–¥–µ–ª–∞–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ APIKey, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –µ–≥–æ –Ω–∞ github.

from APIKey1 import API_KEY
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    JobQueue,
    filters,
    MessageHandler,
)
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
active_votes = {}
chat_settings = {}

async def is_admin(chat_id: int, user_id: int, context: CallbackContext) -> bool:
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        return any(admin.user.id == user_id for admin in admins)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = f"""
    –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–µ—Ç–æ–º –ø–∏—Å–∞—Ç—å –∏–ª–∏ –±–∞–Ω–æ–º –Ω–∞–≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã.
    –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
    –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç—Ä–æ–∫–æ–π @{context.bot.username} –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –µ–≥–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ
    /VotesLimit [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) = {get_votes_limit(update.effective_chat.id)}
    /VotesMonoLimit [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —á–∏—Å–ª–æ –≥–æ–ª–æ—Å–æ–≤ –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ, —Ç.–µ. –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥–æ–ª–æ—Å–æ–≤ –∑–∞ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) = {get_votes_mono_limit(update.effective_chat.id)}
    /TimeLimit [–º–∏–Ω—É—Ç—ã] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) = {get_time_limit(update.effective_chat.id)/60}
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """
    await update.message.reply_text(help_text)

async def set_votes_limit(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /VotesLimit [—á–∏—Å–ª–æ]")
        return
    
    votes_limit = int(context.args[0])
    chat_settings.setdefault(chat_id, {})["votes_limit"] = votes_limit
    await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {votes_limit}")

async def set_votes_mono_limit(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /VotesMonoLimit [—á–∏—Å–ª–æ]")
        return
    
    votes_mono_limit = int(context.args[0])
    chat_settings.setdefault(chat_id, {})["votes_mono_limit"] = votes_mono_limit
    await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ –≥–æ–ª–æ—Å–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {votes_mono_limit}")

async def set_time_limit(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    if not await is_admin(chat_id, user_id, context):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return
    
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /TimeLimit [–º–∏–Ω—É—Ç—ã]")
        return
    
    minutes = int(context.args[0])
    time_limit = minutes * 60
    chat_settings.setdefault(chat_id, {})["time_limit"] = time_limit
    await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {minutes} –º–∏–Ω")

async def start_vote(update: Update, context: CallbackContext) -> None:
    if not update.message.reply_to_message:
        return       
    bot_username = context.bot.username.lower()
    mentioned = any(
        entity.type == "mention" 
        and update.message.text[entity.offset:entity.offset+entity.length].lower() == f"@{bot_username}"
        for entity in update.message.entities or []
    )
    if not mentioned:
        return
    target_user = update.message.reply_to_message.from_user
    chat_id = update.effective_chat.id
    initiator_id = update.effective_user.id
    
    if await is_admin(chat_id, target_user.id, context):
        await update.message.reply_text("–ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    votes_limit = get_votes_limit(chat_id)
    votes_mono_limit = get_votes_mono_limit(chat_id)
    time_limit = get_time_limit(chat_id)
    
    keyboard = [
        [
            InlineKeyboardButton("‚è≥ –ß–∏—Ç–∞—Ç–µ–ª—å 24—á", callback_data=f"vote:day:{target_user.id}"),
            InlineKeyboardButton("‚ôæÔ∏è –ë–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"vote:forever:{target_user.id}"),
            InlineKeyboardButton("–ü—Ä–æ—Å—Ç–∏—Ç—å", callback_data=f"vote:forgive:{target_user.id}"),
        ],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"vote:cancel:{target_user.id}")],
    ]
    message = await update.message.reply_text(
        f"üî® –ù–∞—á–∞—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.name}\n"
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≥–æ–ª–æ—Å–æ–≤: {votes_limit} –∏–ª–∏ –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ {votes_mono_limit}\n",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    
    vote_id = (chat_id, message.message_id)
    active_votes[vote_id] = {
        "initiator_id": initiator_id,
        "target_user_id": target_user.id,
        "target_username": target_user.name,
        "votes_day": 0,
        "votes_forever": 0,
        "votes_forgive": 0,
        "voters": {},
        "start_time": datetime.now(),
        "votes_limit": votes_limit,
        "votes_mono_limit": votes_mono_limit,
        "time_limit": time_limit,
        "original_message_id": update.message.reply_to_message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    }
    
    context.job_queue.run_once(
        end_vote, time_limit, data=vote_id, name=str(vote_id)
    )

def get_votes_limit(chat_id):
    return chat_settings.get(chat_id, {}).get("votes_limit", 15)

def get_votes_mono_limit(chat_id):
    return chat_settings.get(chat_id, {}).get("votes_mono_limit", 10)

def get_time_limit(chat_id):
    return chat_settings.get(chat_id, {}).get("time_limit", 3600)

async def handle_vote(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    data = query.data.split(":")
    if len(data) != 3 or data[0] != "vote":
        return
    
    action, target_user_id = data[1], int(data[2])
    vote_id = (query.message.chat_id, query.message.message_id)
    vote_data = active_votes.get(vote_id)
    
    if not vote_data or vote_data["target_user_id"] != target_user_id:
        await query.edit_message_text("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return
    
    user_id = query.from_user.id
    
    if action == "cancel":
        if user_id != vote_data["initiator_id"]:
            await query.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å")
            return
        
        for job in context.job_queue.get_jobs_by_name(str(vote_id)):
            job.schedule_removal()
        del active_votes[vote_id]
        await query.edit_message_text(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    current_vote = vote_data["voters"].get(user_id)
    if current_vote == action:
        await query.answer("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏")
        return
    
    if current_vote:
        vote_data[f"votes_{current_vote}"] -= 1
    
    vote_data["voters"][user_id] = action
    vote_data[f"votes_{action}"] += 1
    
    remaining = (vote_data["time_limit"] - (datetime.now() - vote_data["start_time"]).total_seconds()) // 60
    
    text = FullStatus(vote_data, remaining)
    await query.edit_message_text(text, reply_markup=query.message.reply_markup)
    if (False
        or vote_data["votes_day"] == vote_data["votes_limit"] 
        or vote_data["votes_day"] == vote_data["votes_mono_limit"] and vote_data["votes_forever"] == 0 and vote_data["votes_forgive"] == 0):
        result = "day"
    elif (False
        or vote_data["votes_forever"] == vote_data["votes_limit"] 
        or vote_data["votes_forever"] == vote_data["votes_mono_limit"] and vote_data["votes_day"] == 0 and vote_data["votes_forgive"] == 0):
        result = "forever"
    elif (False
        or vote_data["votes_forgive"] == vote_data["votes_limit"] 
        or vote_data["votes_forgive"] == vote_data["votes_mono_limit"] and vote_data["votes_day"] == 0 and vote_data["votes_forever"] == 0):
        result = 'forgive'
    else:
        result = None
    if result:
        vote_data["result"] = result
        for job in context.job_queue.get_jobs_by_name(str(vote_id)):
            job.schedule_removal()
        await end_vote(context, vote_id)

def FullStatus(vote_data, remaining):
    text = (
        f"üî® –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ {vote_data['target_username']}\n"
        f"{vote_data['votes_day']} –∑–∞ —á–∏—Ç–∞—Ç–µ–ª—è (–∑–∞–ø—Ä–µ—Ç –ø–∏—Å–∞—Ç—å) 24—á\n"
        f"{vote_data['votes_forever']} –∑–∞ –±–∞–Ω (–ª–∏—à–∏—Ç—å –¥–æ—Å—Ç—É–ø–∞) –Ω–∞–≤—Å–µ–≥–¥–∞\n"
        f"{vote_data['votes_forgive']} –∑–∞ –ø—Ä–æ—â–µ–Ω–∏–µ\n"
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≥–æ–ª–æ—Å–æ–≤: {vote_data['votes_limit']} –∏–ª–∏ –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ {vote_data['votes_mono_limit']}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {int(remaining)} –º–∏–Ω"
    )
    return text

async def end_vote(context: CallbackContext, vote_id: tuple) -> None:
    vote_data = active_votes.pop(vote_id, None)
    if not vote_data:
        return
    chat_id, message_id = vote_id
    result = vote_data["result"]
    result_message = ""
    if result == 'forgive':
        result_message = "–ø—Ä–æ—â–µ–Ω"
    elif result == 'forever':
        await context.bot.ban_chat_member(chat_id, vote_data["target_user_id"])
        result_message = "–∑–∞–±–∞–Ω–µ–Ω (–ª–∏—à–µ–Ω –¥–æ—Å—Ç—É–ø–∞) –Ω–∞–≤—Å–µ–≥–¥–∞"
        try:
            await context.bot.delete_message(chat_id, vote_data["original_message_id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        until = datetime.now() + timedelta(days=1)
        result_message = "—Ç–µ–ø–µ—Ä—å —á–∏—Ç–∞—Ç–µ–ª—å (–∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å) –Ω–∞ 24—á"
        await context.bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=vote_data["target_user_id"],
            permissions=ChatPermissions(
                can_send_messages=False,  # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            ),
            until_date=until
        )
        try:
            await context.bot.delete_message(chat_id, vote_data["original_message_id"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    voters = []
    for user_id, vote_type in vote_data["voters"].items():
        if vote_type == result:
            try:
                user = await context.bot.get_chat_member(chat_id, user_id)
                voters.append("@"+user.user.username)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                voters.append(f"id{user_id}")
    voters_text = f"–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏({len(voters)}): " + ", ".join(voters)
    await context.bot.edit_message_text(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vote_data['target_username']} {result_message}. " + voters_text,
        chat_id=chat_id,
        message_id=message_id,
    )

def main() -> None:
    application = ApplicationBuilder().token(API_KEY).build()
    
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("VotesLimit", set_votes_limit))
    application.add_handler(CommandHandler("VotesMonoLimit", set_votes_mono_limit))
    application.add_handler(CommandHandler("TimeLimit", set_time_limit))
    application.add_handler(
        MessageHandler(
            filters.ChatType.GROUPS 
            & filters.REPLY 
            & filters.Entity("mention"),
            start_vote
            )
    )
    application.add_handler(CallbackQueryHandler(handle_vote))
    application.run_polling()

if __name__ == "__main__":
    main()